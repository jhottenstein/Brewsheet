{
  "author": {
    "name": "Mickael Daniel"
  },
  "name": "fileset",
  "description": "Wrapper around miniglob / minimatch combo to allow multiple patterns matching and include-exclude ability",
  "version": "0.1.3",
  "homepage": "https://github.com/mklabs/node-fileset",
  "repository": {
    "type": "git",
    "url": "git://github.com/mklabs/node-fileset.git"
  },
  "main": "./lib/fileset",
  "scripts": {
    "test": "node tests/test.js"
  },
  "dependencies": {
    "minimatch": "~0.1.5",
    "glob": "~3.0.1"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/mklabs/node-fileset/blob/master/LICENSE-MIT"
    }
  ],
  "readme": "# node-fileset\n\nExposes a basic wrapper on top of\n[Glob](https://github.com/isaacs/node-glob) /\n[minimatch](https://github.com/isaacs/minimatch) combo both written by\n@isaacs. Glob now uses javascript instead of C++ bindings and make it\nusable in node 0.6.x and windows platforms.\n\n[![Build Status](https://secure.travis-ci.org/mklabs/node-fileset.png)](http://travis-ci.org/mklabs/node-fileset)\n\nEnable multiples patterns matching, and include exlude ability. This is\nbascially just sugar API syntax where you can specify a list of includes\nand optionnal exclude patterns. It works by setting up the necessary\nminiglob \"fileset\" and filtering out the results using minimatch.\n\n## install\n\n    npm install fileset\n\n## usage\n\nCan be used with callback or emitter style.\n\n* **include**: list of glob patterns `foo/**/*.js *.md src/lib/**/*`\n* **exclude**: *optional* list of glob patterns to filter include\n  results `foo/**/*.js *.md`\n* **callback**: *optional* function that gets called with an error if\n  something wrong happend, otherwise null with an array of results\n\nThe callback is optional since the fileset method return an instance of\nEventEmitter which emit different events you might use:\n\n* *match*: Every time a match is found, miniglob emits this event with\n  the pattern.\n* *include*: Emitted each time an include match is found.\n* *exclude*: Emitted each time an an exclude match is found and filtered\n  out from the fileset.\n* *end*:  Emitted when the matching is finished with all the matches\n  found, optionnaly filterd by the exclude patterns.\n\n#### callback\n\n    var fileset = require('fileset');\n\n    fileset('**/*.js', '**.min.js', function(err, files)Â {\n      if (err) return console.error(err);\n\n      console.log('Files: ', files.length);\n      console.log(files);\n    });\n\n\n#### event emitter\n\n    var fileset = require('fileset');\n\n    fileset('**.coffee README.md *.json Cakefile **.js', 'node_modules/**')\n      .on('match', console.log.bind(console, 'error'))\n      .on('include', console.log.bind(console, 'includes'))\n      .on('exclude', console.log.bind(console, 'excludes'))\n      .on('end', console.log.bind(console, 'end'));\n\nfileset returns an instance of EventEmitter, with an `includes` property\nwhich is the array of Fileset objects (inheriting from\n`miniglob.Miniglob`) that were used during the mathing process, shoud\nyou want to use them individually.\n\nCheck out the\n[tests](https://github.com/mklabs/node-fileset/tree/master/tests) for\nmore examples.\n\n## tests\n\njust run `npm test`\n\n## why\n\nmainly as a build tool with cake files, to provide me an easy way to get\na list of files by either using glob or path patterns, optionnaly\nallowing exclude patterns to filter out the results.\n\nAll the magic is happening in\n[Glob](https://github.com/isaacs/node-glob) and\n[minimatch](https://github.com/isaacs/minimatch), check them out !\n",
  "readmeFilename": "README.md",
  "_id": "fileset@0.1.3",
  "dist": {
    "shasum": "a2ffad575b1939310d3491c054898044df10a5a1"
  },
  "_from": "fileset@0.1.x"
}
